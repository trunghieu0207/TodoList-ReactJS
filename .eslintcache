[{"C:\\project\\my-app\\src\\components\\__stories__\\Form.stories.tsx":"1","C:\\project\\my-app\\src\\components\\Form.tsx":"2","C:\\project\\my-app\\src\\components\\ToDoList.tsx":"3","C:\\project\\my-app\\src\\index.js":"4","C:\\project\\my-app\\src\\reportWebVitals.js":"5","C:\\project\\my-app\\src\\App.tsx":"6","C:\\project\\my-app\\src\\components\\Todo.tsx":"7","C:\\project\\my-app\\src\\components\\__stories__\\Todo.stories.tsx":"8","C:\\project\\my-app\\src\\components\\__stories__\\ToDoList.stories.tsx":"9"},{"size":1006,"mtime":1615534818348,"results":"10","hashOfConfig":"11"},{"size":1596,"mtime":1615538461225,"results":"12","hashOfConfig":"11"},{"size":662,"mtime":1615534818347,"results":"13","hashOfConfig":"11"},{"size":517,"mtime":1615534818352,"results":"14","hashOfConfig":"11"},{"size":375,"mtime":1615534818354,"results":"15","hashOfConfig":"11"},{"size":1969,"mtime":1615534818345,"results":"16","hashOfConfig":"11"},{"size":1798,"mtime":1615538430510,"results":"17","hashOfConfig":"11"},{"size":706,"mtime":1615538060753,"results":"18","hashOfConfig":"11"},{"size":921,"mtime":1615538044118,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"g95q5d",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\project\\my-app\\src\\components\\__stories__\\Form.stories.tsx",[],["43","44"],"C:\\project\\my-app\\src\\components\\Form.tsx",[],"C:\\project\\my-app\\src\\components\\ToDoList.tsx",[],["45","46"],"C:\\project\\my-app\\src\\index.js",[],"C:\\project\\my-app\\src\\reportWebVitals.js",[],"C:\\project\\my-app\\src\\App.tsx",["47"],"C:\\project\\my-app\\src\\components\\Todo.tsx",["48"],"import React, {useState} from 'react';\r\nimport {TodoInterface} from '../App'\r\nimport {faCheck, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport clsx from \"clsx\";\r\n\r\n\r\ntype SetTodo = (arg0: any) => void;\r\n\r\nexport interface TodoProps {\r\n    setTodo: SetTodo;\r\n    toDos: TodoInterface[];\r\n    toDo: TodoInterface;\r\n}\r\n\r\nconst Todo = (props: { setTodo: SetTodo; toDos: TodoInterface[]; toDo: TodoInterface; }) => {\r\n    const deleteHandler = () => {\r\n        props.setTodo(props.toDos.filter((todo: TodoInterface) => todo.id !== props.toDo.id));\r\n    }\r\n\r\n    const completeHandler = () => {\r\n        props.setTodo(props.toDos.map((item: TodoInterface) => {\r\n            if (item.id === props.toDo.id) {\r\n                return {\r\n                    ...item, completed: !item.completed,\r\n                }\r\n            }\r\n\r\n            return item;\r\n        }));\r\n    }\r\n\r\n    const completedCss = clsx('todo-item', {\r\n        completed: props.toDo.completed\r\n    })\r\n\r\n    return (\r\n        <div className={'todo'}>\r\n            <li className={completedCss}>{props.toDo.text}</li>\r\n            <button onClick={completeHandler} className={'complete-btn'}>\r\n                <FontAwesomeIcon icon={faCheck} />\r\n            </button>\r\n            <button onClick={deleteHandler} className={'trash-btn'}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","C:\\project\\my-app\\src\\components\\__stories__\\Todo.stories.tsx",["49"],"import Todo, {TodoProps} from \"../Todo\";\r\nimport {action} from \"@storybook/addon-actions\";\r\nimport {Story} from \"@storybook/react/types-6-0\";\r\n\r\nconst todos = [\r\n    {\r\n        completed: true,\r\n        text: 'Completed',\r\n        id: Math.random() * 1000,\r\n    },\r\n    {\r\n        completed: false,\r\n        text: 'Uncompleted',\r\n        id: Math.random() * 1000,\r\n    },\r\n]\r\nconst handleClick = action('click');\r\n\r\nexport default {\r\n    title: 'My Component/Todo',\r\n    component: Todo\r\n}\r\n\r\nconst Template: Story<TodoProps> = (args) => (\r\n    <Todo {...args}/>\r\n)\r\n\r\nexport const TodoStories = Template.bind({});\r\nTodoStories.args = {\r\n    toDos: todos,\r\n    setTodo: handleClick,\r\n    toDo: todos[0]\r\n};","C:\\project\\my-app\\src\\components\\__stories__\\ToDoList.stories.tsx",["50"],"import ToDoList, {ToDoListProps} from \"../ToDoList\";\r\nimport {action} from \"@storybook/addon-actions\";\r\nimport {Story} from \"@storybook/react/types-6-0\";\r\nimport {TodoInterface} from \"../../App\";\r\n\r\ninterface ToDoListPropsStory extends ToDoListProps {\r\n    toDo?: TodoInterface;\r\n}\r\n\r\nconst todos: TodoInterface[] = [\r\n    {\r\n        completed: true,\r\n        text: 'Completed',\r\n        id: Math.random() * 1000,\r\n    },\r\n    {\r\n        completed: false,\r\n        text: 'Uncompleted',\r\n        id: Math.random() * 1000,\r\n    },\r\n]\r\n\r\nconst handleClick = action('click');\r\n\r\nexport default {\r\n    title: 'My Component/Todo List',\r\n    component: ToDoList\r\n}\r\nconst Template: Story<ToDoListPropsStory> = (args) => (\r\n    <ToDoList {...args}/>\r\n);\r\n\r\nexport const TodoListStories = Template.bind({});\r\nTodoListStories.args = {\r\n    filterTodo: todos,\r\n    setToDos: handleClick,\r\n    toDo: todos[0],\r\n    toDos: todos\r\n};\r\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"51","replacedBy":"55"},{"ruleId":"53","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":26,"column":8,"nodeType":"59","endLine":26,"endColumn":23,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":24},{"ruleId":"65","severity":1,"message":"66","line":19,"column":1,"nodeType":"67","endLine":22,"endColumn":2},{"ruleId":"65","severity":1,"message":"66","line":25,"column":1,"nodeType":"67","endLine":28,"endColumn":2},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],["68"],["69"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterHandler' and 'saveToLocalStorage'. Either include them or remove the dependency array.","ArrayExpression",["70"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [toDos, status, filterHandler, saveToLocalStorage]",{"range":"73","text":"74"},[642,657],"[toDos, status, filterHandler, saveToLocalStorage]"]